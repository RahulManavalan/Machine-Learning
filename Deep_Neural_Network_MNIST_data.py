# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uZOHn8bbmmOaw6xn-4LXIg2re9HzKz6N
"""

import tensorflow as tf 
print(tf.__version__) 
from tensorflow.examples.tutorials.mnist import input_data

mnist = input_data.read_data_sets("MNIST_data/",one_hot=True)

sess = tf.InteractiveSession()

# Defining placehodlers for the input data 

x = tf.placeholder(tf.float32,shape=[None,784]) 
y = tf.placeholder(tf.float32,shape=[None,10])

# In order for convolution to work , we should reshape the input data in the form \
# 28*28*1 matrix / tensor 
x_image = tf.reshape(x,[-1,28,28,1],name="x_image")

# Use helper functions to determine the weights and biases \
# to enable the convolution and pooling layers 
# We use the RELU activation function which must be initialized to a postive number 
# and with some noise so that you don't end up going to zero when comparing differences 

def weight_variable(shape) : 
  initial = tf.truncated_normal(shape,stddev=0.1) 
  return tf.Variable(initial) 

def bias_variable(shape): 
  initial = tf.constant(0.1,shape=shape) 
  return tf.Variable(initial)

# Convolution and pooling funtions 

def conv2d(x,W) : 
  return tf.nn.conv2d(x,W,strides=[1,1,1,1], padding="SAME") 

def max_pool_2x2(x) : 
  return tf.nn.max_pool(x,ksize=[1,2,2,1],strides=[1,2,2,1],padding="SAME")

# Defining layers in the NN 

W_conv1 = weight_variable([5,5,1,32]) 
b_conv1 = bias_variable([32]) 

# Perform a convolution on the images and add bias and pass it through the RELU function 
h_conv1 = tf.nn.relu(conv2d(x_image,W_conv1)+b_conv1) 
h_pool1 = max_pool_2x2(h_conv1)

# 2nd Convolution layer 

W_conv2 = weight_variable([5,5,32,64]) 
b_conv2 = bias_variable([64]) 

# Perform convolution 

h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2)+ b_conv2)
h_pool2 = max_pool_2x2(h_conv2)

# Fully connected layer 

W_fcl = weight_variable([7*7*64,1024])
b_fcl = bias_variable([1024]) 

# Connect the output of the second layer to the fully connected layers 

h_pool2_flat = tf.reshape(h_pool2,[-1,7*7*64])
h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat,W_fcl) + b_fcl)

# dropout layer 

keep_prob = tf.placeholder(tf.float32) 
h_fc1_drop = tf.nn.dropout(h_fc1,keep_prob)

# Readout layer 

W_fc2 = weight_variable([1024,10]) 
b_fc2 = bias_variable([10])

# Defining model 

y_conv = tf.matmul(h_fc1_drop,W_fc2) + b_fc2

# Loss measurement 

cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=y_conv,labels=y_))

# Loss optimization 

train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)

# Accuracy measurement 

correct_prediction = tf.equal(tf.argmax(y_conv,1),tf.argmax(y_,1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))

# initialize session 

sess.run(tf.global_variables_initializer())

import time 

num_steps = 3000 
display_every = 100 

# Start timer 
start_time = time.time() 
end_time = time.time() 

for i in range(num_steps) : 
  batch = mnist.train.next_batch(50) 
  train_step.run(feed_dict = {x:batch[0],y_:batch[1],keep_prob:0.5})

  if i% display_every == 0 : 
    train_accuracy = accuracy.eval(feed_dict = {x:batch[0],y_:batch[1],keep_prob:1.0})
    end_time = time.time() 
    print("step{0},elapsed time {1:.2f} seconds,training accuracy {2:.3f}%".format(i,end_time-start_time,train_accuracy*100.0))

end_time = time.time() 
print("Total training time for{0} batches :{1:.2f}".format(i+1,end_time-start_time))

# Accuracy on test data 
print("Test Accuracy {0:.3f}%".format(accuracy.eval(feed_dict={x:mnist.test.images,y_:mnist.test.labels,keep_prob:1.0})*100.0))

sess.close()